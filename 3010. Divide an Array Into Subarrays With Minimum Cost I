You are given an array of integers nums of length n.

The cost of an array is the value of its first element. For example, the cost of [1,2,3] is 1 while the cost of [3,4,1] is 3.

You need to divide nums into 3 disjoint contiguous subarrays.

Return the minimum possible sum of the cost of these subarrays.

 class Solution:
    def minimumCost(self, nums: List[int]) -> int:
        if len(nums)==3:return sum(nums)
        s = 0
        s+=nums[0]
        nums.remove(nums[0])
        mini = min(nums)
        s+=mini
        nums.remove(mini)
        mini = min(nums)
        nums.remove(mini)
        s+=mini
        return s
        
